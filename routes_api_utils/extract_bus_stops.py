import folium
from pyproj import Transformer
paths_blue_route = [
    [31.327646099437494, -89.2856930699543],
    [31.326958747564568, -89.28494205143014],
    [31.326298885044768, -89.28571452762642],
    [31.324777517721124, -89.2874740567402],
    [31.32654633403173, -89.28964128162421],
    [31.32768275806307, -89.29099311496772],
    [31.327792733854153, -89.2912935223774],
    [31.328507573364316, -89.29320325519599],
    [31.327426147384212, -89.29406156208076],
    [31.327004571178904, -89.29438342716254],
    [31.324750022904755, -89.29436196949042],
    [31.32478668265813, -89.30494060184513],
    [31.324768352783227, -89.31045522357977],
    [31.324768352783227, -89.32714929248844],
    [31.324768352783227, -89.32822217609441],
    [31.324841672261414, -89.33101167346989],
    [31.325024970707062, -89.34049596454652],
    [31.325061630353368, -89.34287776615174],
    [31.325098289985384, -89.347963234444],
    [31.325189939003003, -89.35210456516297],
    [31.325116619796052, -89.35339202549012],
    [31.324914991682505, -89.35474385883363],
    [31.324035154860773, -89.3603228535846],
    [31.32313697962398, -89.36622371341738],
    [31.32352191291754, -89.36628808643373],
    [31.32383352443104, -89.36622371341738],
    [31.325318247477767, -89.3658160176471],
    [31.325574863902673, -89.36761846210513],
    [31.323265290896707, -89.36763991977723],
    [31.32293534727067, -89.36781158115419],
    [31.322532081268623, -89.37300433780703],
    [31.322807035548287, -89.3734334912494],
    [31.325153279406663, -89.37351932193789],
    [31.325116619796052, -89.37427034046205],
    [31.323925174679903, -89.37424888278993],
    [31.323540243035115, -89.374442001839],
    [31.323375271848423, -89.3747853245929],
    [31.323246960725587, -89.37626590396914],
    [31.323228630550908, -89.37690963413272],
    [31.32339360199455, -89.37733878757508],
    [31.323540243035115, -89.37744607593568],
    [31.324933321528842, -89.37761773731265],
    [31.325189939003003, -89.37791814472232],
    [31.325501544995507, -89.37808980609924],
    [31.327737745974673, -89.37808980609924],
    [31.327792733854153, -89.37933435108216],
    [31.326528004499444, -89.37926997806582],
    [31.326344708980315, -89.37933435108216],
    [31.326033105778716, -89.37967767383607],
    [31.325318247477767, -89.38057889606507],
    [31.325098289985384, -89.3809436764911],
    [31.324750022904755, -89.38117971088441],
    [31.322367108315394, -89.38120116855653],
    [31.322128813539308, -89.38117971088444],
    [31.321725544082746, -89.38121189739262],
    [31.32207382235148, -89.37822928096804],
    [31.320369079598482, -89.37820782329592],
    [31.320332418124988, -89.37944163944279],
    [31.32170721361186, -89.37947382595097],
    [31.32200050071775, -89.37621225978884],
    [31.322266291368344, -89.37293996479067],
    [31.322422099331924, -89.37081565525088],
    [31.32268788879235, -89.36757554676089],
    [31.322852861183502, -89.36612715389285],
    [31.323274455980922, -89.3632196393207],
    [31.323549408092575, -89.36132063533816],
    [31.323888514591065, -89.35948600437197],
    [31.323613563469756, -89.3593250718311],
    [31.323100319228224, -89.3592928853229],
    [31.3231553098165, -89.35631026889834],
    [31.323283621064245, -89.35590257312809],
    [31.32325612581159, -89.35599913265261],
    [31.32255957673272, -89.35598840381654],
    [31.32247709031633, -89.35634245540652],
    [31.324392589561292, -89.35632099773441],
    [31.32473169302273, -89.35420741703066],
    [31.324841672261414, -89.35346712734255],
    [31.324896661832586, -89.3523405995563],
    [31.324924156606127, -89.3509887662128],
    [31.32496081629168, -89.34967984821353],
    [31.324887496906285, -89.34618224765809],
    [31.32480501252946, -89.34059252407107],
    [31.324667538407482, -89.33489551212342],
    [31.324621713655546, -89.33254589702636],
    [31.321065644882683, -89.3325351681903],
    [31.321019818377604, -89.3312047925189],
    [31.32464920850939, -89.33127989437132],
    [31.32465837345888, -89.32823290493042],
    [31.32465837345888, -89.32772864963562],
    [31.32468586830202, -89.32551850940735],
    [31.32469503324794, -89.3185233082965],
    [31.324704198192975, -89.3128906693652],
    [31.324713363137118, -89.3087815251544],
    [31.32472252808036, -89.30634607936885],
    [31.324713363137118, -89.30261244442012],
    [31.324713363137118, -89.29435124065425],
    [31.327004571178904, -89.29436196949031],
    [31.328507573364316, -89.2931925263598],
    [31.32768275806307, -89.29100384380364],
    [31.325153279406663, -89.28794612552667],
    [31.324777517721124, -89.28747405674004],
    [31.32630804983366, -89.28568234111809],
    [31.326958747564568, -89.28494205142998],
    [31.327655264095235, -89.28569306995415],
]

import json

def extract_bus_stops(input_file, output_file):
    try:
        with open(input_file, 'r') as f:
            data = json.load(f)

        bus_stops = []
        # Navigate through the nested structure
        for operational_layer in data.get('operationalLayers', []):
            feature_collection = operational_layer.get('featureCollection', {})
            for layer in feature_collection.get('layers', []):
                for feature in layer.get('featureSet', {}).get('features', []):
                    attributes = feature.get('attributes', {})
                    geometry = feature.get('geometry', {})
                    # if Route : ............. then only extract the data
                    if attributes.get('Route', '') == 'Gold Line (USM)':
                        bus_stop = {
                            'x': convert_coordinates(0,geometry.get('y'))[0],
                            'y': convert_coordinates(geometry.get('x'),0)[1],
                            'location':attributes.get('Location', 'Unknown'),
                            'direction': attributes.get('Direction', 'Unknown'),
                            'stop_id': +1
                        }
                        bus_stops.append(bus_stop)
        
        with open(output_file, 'w') as f:
            json.dump(bus_stops, f, indent=2)
        print(f"Bus stops data saved to {output_file}")
    except FileNotFoundError:
        print(f"Error: The file {input_file} was not found.")
    except json.JSONDecodeError:
        print(f"Error: The file {input_file} is not a valid JSON file.")
    except KeyError as e:
        print(f"Error: {e}")

#     # this is sample json data , the file contains multiple number of data in same format. I just want the x and y from geometry and location from attributes
# {"geometry": {
#     "x": -9939662,
#     "y": 3675211,
#     "spatialReference": { "wkid": 102100, "latestWkid": 3857 }
#   },
#   "attributes": {
#     "FID": 0,
#     "Id": 1,
#     "Route": "Blue Line (Hardy St)",
#     "Location": "Main St and Front St",
#     "Direction": "Outbound"
#   }
# }
transformer = Transformer.from_crs("EPSG:3857", "EPSG:4326")

def convert_coordinates(x,y):
    return transformer.transform(x,y)

input_file = 'blue_route_stops.json'
output_file = 'extracted_stops.json'
def extract_stops_and_names():
    input_file = 'routes_api_utils/blue_route_stops.json'
    output_file = 'extracted_stops.json'
    
    try:
        with open(input_file, 'r') as f:
            data = json.load(f)

        stops_and_names = []
        for item in data:
            geometry = item.get('geometry', {})
            attributes = item.get('attributes', {})
            if 'x' in geometry and 'y' in geometry:
                x, y = convert_coordinates(geometry['x'], geometry['y'])
            stop_info = {
                'x': x,#with converted coordinates. 
                'y': y,
                'location': attributes.get('Location', 'Unknown'),
                'direction': attributes.get('Direction', 'Unknown')
            }
            stops_and_names.append(stop_info)
        
        with open(output_file, 'w') as f:
            json.dump(stops_and_names, f, indent=2)
        print(f"Stops and names data saved to {output_file}")
    except FileNotFoundError:
        print(f"Error: The file {input_file} was not found.")
    except json.JSONDecodeError:
        print(f"Error: The file {input_file} is not a valid JSON file.")
    except KeyError as e:
        print(f"Error: {e}")


if __name__ == "__main__":
    input_file = 'jsons/allDataTOFindStops.json'
    extract_bus_stops(input_file, 'gold_route_stops.json')

